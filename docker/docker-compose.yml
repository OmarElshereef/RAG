services:
  #FastAPI application service
  fastapi:
    build:
      context: ..
      dockerfile: docker/minirag/Dockerfile

    container_name: fastapi

    volumes:
      - fastapi_data:/app/src/assets

    ports:
      - "8000:8000"

    networks:
      - backend

    depends_on:
      pgvector:
        condition: service_healthy

    env_file:
      - ./env/.env.app

  #Nginx service
  nginx:
    image: nginx:stable-alpine3.21-perl
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/nginx.conf
    depends_on:
      - fastapi
    networks:
      - backend
    restart: always
  # PostgreSQL database service(Pgvector)
  pgvector:
    image: pgvector/pgvector:0.8.0-pg17
    container_name: pgvector
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - ./env/.env.postgres
    networks:
      - backend
    restart: always

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  # Qdrant
  qdrant:
    image: qdrant/qdrant:v1.13.6
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - backend
    restart: always

  # prothesus for monitoring
  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend
    restart: always

    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
  # Grafana dashboard
  grafana:
    image: grafana/grafana:11.6.0-ubuntu
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    env_file:
      - ./env/.env.grafana
    depends_on:
      - prometheus
    networks:
      - backend
    restart: always

  # Node Exporter for system metrics
  node_exporter:
    image: prom/node-exporter:v1.9.1
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - '--collector.filesystem.mount-points-exclude="^/(sys|proc|dev|host|etc)($$|/)"'
    networks:
      - backend
    restart: always

  # postgres exporter for PostgreSQL metrics
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:v0.17.1
    container_name: postgres-exporter
    env_file:
      - ./env/.env.postgres-exporter
    ports:
      - "9187:9187"
    depends_on:
      - pgvector
    networks:
      - backend
    restart: always

networks:
  backend:
    driver: bridge

volumes:
  pgdata:
  qdrant_data:
  prometheus_data:
  grafana_data:
  fastapi_data:
